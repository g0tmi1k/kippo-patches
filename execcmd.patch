--- ../kippo.cfg.dist
+++ ../kippo.cfg.dist
@@ -81,6 +81,11 @@
 dsa_public_key = data/ssh_host_dsa_key.pub
 dsa_private_key = data/ssh_host_dsa_key

+# Enables passing commands using ssh execCommand (e.g. ssh root@localhost <command>)
+#
+# (default: false)
+exec_enabled = true
+
 # Initial root password. NO LONGER USED!
 # Instead, see {data_path}/userdb.txt
 #password = 123456

--- ../kippo/core/honeypot.py
+++ ../kippo/core/honeypot.py
@@ -11,7 +11,7 @@
 from twisted.python import failure, log
 from zope.interface import implements
 from copy import deepcopy, copy
-import sys, os, random, pickle, time, stat, shlex, anydbm
+import sys, os, random, pickle, time, stat, shlex, anydbm, struct

 from kippo.core import ttylog, fs, utils
 from kippo.core.userdb import UserDB
@@ -136,6 +136,8 @@
         self.runCommand()

     def showPrompt(self):
+        if (self.honeypot.execcmd != None):
+            return
         if not self.honeypot.user.uid:
             prompt = '%s:%%(path)s# ' % self.honeypot.hostname
         else:
@@ -232,9 +234,10 @@
         self.honeypot.terminal.write(newbuf)

 class HoneyPotProtocol(recvline.HistoricRecvLine):
-    def __init__(self, user, env):
+    def __init__(self, user, env, execcmd = None):
         self.user = user
         self.env = env
+        self.execcmd = execcmd
         self.hostname = self.env.cfg.get('honeypot', 'hostname')
         self.fs = fs.HoneyPotFilesystem(deepcopy(self.env.fs))
         if self.fs.exists(user.home):
@@ -271,6 +274,13 @@
         else:
             self.clientIP = self.realClientIP

+        if self.execcmd != None:
+            print 'Running exec cmd "%s"' % self.execcmd
+            self.cmdstack[0].lineReceived(self.execcmd)
+            self.terminal.transport.session.conn.sendRequest(self.terminal.transport.session, 'exit-status', struct.pack('>L', 0))
+            self.terminal.transport.session.conn.sendClose(self.terminal.transport.session)
+            return
+
         self.keyHandlers.update({
             '\x04':     self.handle_CTRL_D,
             '\x15':     self.handle_CTRL_U,
@@ -332,6 +342,9 @@
         return None

     def lineReceived(self, line):
+        # don't execute additional commands after execcmd
+        if self.execcmd != None:
+            return
         if len(self.cmdstack):
             self.cmdstack[-1].lineReceived(line)

@@ -461,7 +474,16 @@
         return None

     def execCommand(self, protocol, cmd):
-        raise NotImplementedError
+        cfg = config()
+        if cfg.has_option('honeypot', 'exec_enabled'):
+            if ( cfg.get('honeypot', 'exec_enabled') != "true" ):
+                print 'exec disabled not executing command: "%s"' % cmd
+                raise os.OSError
+
+        print 'Executing command: "%s"' % cmd
+        serverProtocol = LoggingServerProtocol(HoneyPotProtocol, self, self.env, cmd)
+        serverProtocol.makeConnection(protocol)
+        protocol.makeConnection(session.wrapProtocol(serverProtocol))

     def closed(self):
         pass

